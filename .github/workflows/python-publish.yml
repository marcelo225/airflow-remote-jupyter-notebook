name: Upload Airflow Jupyter Notebook Plugin

on:
  push:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - uses: actions/checkout@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Run id user
      - name: Run id user
        run: |
          echo $(id -u)
          echo $(id -g)
          echo $(id -u --name)
          echo $(id -g --name)

      # Build Docker Image for Airflow
      - name: Build Docker Image for Airflow
        run: |
          docker build \
            --build-arg UID=$(id -u) \
            --build-arg GID=$(id -g) \
            --build-arg UNAME=$(id -u --name) \
            --build-arg GNAME=$(id -g --name) \
            -t airflow ./airflow

      # Run the Airflow container
      - name: Run Airflow Container
        run: |
          docker run -d \
            --name airflow \
            --user $(id -u):$(id -g) \
            -e AIRFLOW__CORE__EXECUTOR=SequentialExecutor \
            -p 8080:8080 \
            -v $(pwd)/airflow:/home/airflow \
            airflow

      # Show Airflow container logs for debugging
      - name: Show Airflow Container Logs
        run: |
          docker logs airflow

      # Initialize the database
      - name: Initialize Airflow Database
        run: |
          docker exec airflow airflow db init

      # Start Airflow Scheduler and Webserver
      - name: Start Airflow Scheduler and Webserver
        run: |
          docker exec -d airflow airflow scheduler
          docker exec -d airflow airflow webserver

      # Wait for a few seconds to ensure services are running
      - name: Wait for Airflow Services to Start
        run: sleep 10

      # Install Jupyter Plugin in Airflow globally
      - name: Install Jupyter Plugin in Airflow
        run: |
          docker exec airflow pip install build

      # Run pytest for unit testing
      - name: Run Unit Tests for Airflow Plugin
        run: |
          docker exec airflow pytest

      # Stop and clean up containers
      - name: Tear Down Docker Environment
        run: |
          docker stop airflow
          docker rm airflow

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'

      # Install Twine
      - name: Install Twine
        run: |
          python -m pip install --upgrade twine

      # Build and publish the plugin package to PyPI
      - name: Build and publish
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
          TWINE_PYPI_URL: ${{ secrets.PYPI_URL }}
        run: |
          python -m build
          twine upload --repository-url $TWINE_PYPI_URL -u $TWINE_USERNAME -p $TWINE_PASSWORD airflow/dist/*
